#!/bin/bash

#######################################
# Print size of the given directory
# Ex: dirsize app/ => 25M
#######################################
function dirsize {
  du -skh $1
}

#######################################
# Open Dropbox in a finder window
# Exit the terminal unless run with -k
#######################################
function db {
  open ~/Dropbox
  if [ $1 != '-k' ]; then
    exit
  fi
}

#######################################
# Extract compressed files
# Ex: extract downloaded_package.tar.gz
#######################################
function extract {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2) tar xvjf $1   ;;
      *.tar.gz)  tar xvzf $1   ;;
      *.bz2)     bunzip2 $1    ;;
      *.rar)     unrar x $1    ;;
      *.gz)      gunzip $1     ;;
      *.tar)     tar xvf $1    ;;
      *.tbz2)    tar xvjf $1   ;;
      *.tgz)     tar xvzf $1   ;;
      *.zip)     unzip $1      ;;
      *.Z)       uncompress $1 ;;
      *.7z)      7z x $1       ;;
      *)         echo "Don't know how to extract '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

#######################################
# Open a url in a web browser, because
# sometimes opening a browser is too
# much work
# Ex: web github.com/rails/rails
#######################################
function web {
  if [ -n $1 ]; then
    open "http://www.$1"
  else
    open 'http://www.google.com'
  fi
}

#######################################
# Create Scala project directory and
# template build.sbt file
#######################################
function scroject {
  if [ ! $# -eq 1 ]; then
    printf 'ERR: Wrong number of arguments.\n\nExample usage: scroject projectName\n'
    exit 1
  fi

  if [[ ! -d $1 && ! -f build.sbt ]]; then
    local -r scala_version
    printf "Project $1 doesn't exist, bootstrapping directory.\n"

    mkdir -p src/{main,test}/{resources,scala}/$1/$1.scala
    mkdir project

    printf 'Creating template build.sbt file.\n'
    read -t 5 -n 1 -s -p $'Which Scala version would you like for your project? Will default to 2.11.7.\n' scala_version
    if [ $? -eq 0 ]; then
      build_sbt_file $1 $scala_version
    else
      build_sbt_file $1 2.11.7
    fi
  else
    printf "ERR: There looks like there's already an existing project, exiting...\n"
    exit 0
  fi
}

#######################################
# Creates template build.sbt file
#######################################
function build_sbt_file {
  cat <<EOF >> build.sbt
name := "$1"

version := "0.0.1-SNAPSHOT"

scalaVersion := "$2"

libraryDependencies ++= Seq(
)

scalacOptions ++= Seq(
  "-deprecation",
  "-encoding", "UTF-8",
  "-feature",
  "-language:existentials",
  "-language:higherKinds",
  "-language:implicitConversions",
  "-unchecked",
  "-Xfatal-warnings",
  "-Xfuture",
  "-Yno-adapted-args",
  "-Ywarn-dead-code",
  "-Ywarn-numeric-widen",
  "-Ywarn-unused-import",
  "-Ywarn-value-discard"
)
EOF
}

function type_exists() {
  if [ $(type -P $1) ]; then
    return 0
  fi
  return 1
}

function which_os() {
  if [[ $OSTYPE == $1* ]]; then
    return 0
  fi
  return 1
}

function p_header {
  printf "\n${BOLD}${TP_PURPLE}==========  %s  ==========${RESET}\n" "$@"
}

function p_arrow {
  printf "➜ $@\n"
}

function p_success {
  printf "${TP_GREEN}✔ %s${RESET}\n" "$@"
}

function p_error {
  printf "${TP_RED}✖ %s${RESET}\n" "$@"
}

function p_warning {
  printf "${TP_TAN}➜ %s${RESET}\n" "$@"
}

function p_underline {
  printf "${UNDERLINE}${BOLD}%s${RESET}\n" "$@"
}

function p_bold {
  printf "${BOLD}%s${RESET}\n" "$@"
}

function p_note {
  printf "${UNDERLINE}${BOLD}${TP_BLUE}Note:${RESET} ${TP_BLUE}%s${RESET}\n" "$@"
}
